use proto;

/// Callback interface to be implemented by frameworks' schedulers.
/// Note that only one callback will be invoked at a time, so it is not
/// recommended that you block within a callback because it may cause a
/// deadlock.
///
/// Each callback includes a reference to the scheduler driver that was
/// used to run this scheduler. The reference will not change for the
/// duration of a scheduler. This is intended for convenience so that a
/// scheduler doesn't need to store a reference to the driver itself.
pub trait Scheduler {

    /// Invoked when the scheduler successfully registers with a Mesos master.
    /// A unique ID (generated by the master) used for distinguishing this
    /// framework from others and MasterInfo  with the IP and port of the
    /// current master are provided as arguments.
    fn registered(
        &self,
        driver: &SchedulerDriver,
        framework_id: &proto::FrameworkID,
        master_info: &proto::MasterInfo) -> ();

    /// Invoked when the scheduler re-registers with a newly elected Mesos
    /// master. This is only called when the scheduler has previously been
    /// registered. MasterInfo containing the updated information about the
    /// elected master is provided as an argument.
    fn reregistered(
        &self,
        driver: &SchedulerDriver,
        master_info: &proto::MasterInfo) -> ();

    /// Invoked when resources have been offered to this framework. A single
    /// offer will only contain resources from a single slave. Resources
    /// associated with an offer will not be re-offered to _this_ framework
    /// until either:
    /// (a) this framework has rejected those resources
    ///     (see `SchedulerDriver::launch_tasks) or
    /// (b) those resources have been rescinded
    ///     (see `Scheduler::offer_rescinded`).
    ///
    /// Note that resources may be concurrently offered to more than one
    /// framework at a time (depending on the allocator being used). In that
    /// case, the first framework to launch tasks using those resources will
    /// be able to use them while the other frameworks will have those
    /// resources rescinded (or if a framework has already launched tasks with
    /// those resources then those tasks will fail with a TASK_LOST status
    /// and a message saying as much).
    fn resource_offers(
        &self,
        driver: &SchedulerDriver,
        offers: Vec<proto::Offer>) -> ();

    /// Invoked when the status of a task has changed (e.g., a slave is lost
    /// and so the task is lost, a task finishes and an executor sends a
    /// status update saying so, etc). If implicit acknowledgements are being
    /// used, then returning from this callback _acknowledges_ receipt of this
    /// status update! If for whatever reason the scheduler aborts during this
    /// callback (or the process exits) another status update will be
    /// delivered (note, however, that this is currently not true if the slave
    /// sending the status update is lost/fails during that time). If explicit
    /// acknowledgements are in use, the scheduler must acknowledge this
    /// status on the driver.
    fn status_update(
        &self,
        driver: &SchedulerDriver,
        task_status: &proto::TaskStatus) -> ();

    /// Invoked when the scheduler becomes "disconnected" from the master
    /// (e.g., the master fails and another is taking over).
    fn disconnected(
        &self,
        driver: &SchedulerDriver) -> ();

    /// Invoked when an offer is no longer valid (e.g., the slave was lost or
    /// another framework used resources in the offer). If for whatever reason
    /// an offer is never rescinded (e.g., dropped message, failing over
    /// framework, etc.), a framework that attempts to launch tasks using an
    /// invalid offer will receive TASK_LOST status updats for those tasks
    fn offer_rescinded(
        &self,
        driver: &SchedulerDriver,
        offer_id: &proto::OfferID) -> ();

    /// Invoked when a slave has been determined unreachable (e.g., machine
    /// failure, network partition).  Most frameworks will need to reschedule
    /// any tasks launched on this slave on a new slave.
    fn slave_lost(
        &self,
        driver: &SchedulerDriver,
        slave_id: &proto::SlaveID) -> ();

    /// Invoked when an executor has exited/terminated. Note that any tasks
    /// running will have TASK_LOST status updates automagically generated.
    fn executor_lost(
        &self,
        driver: &SchedulerDriver,
        executor_id: &proto::ExecutorID,
        slave_id: &proto::SlaveID,
        status: i32) -> ();

    /// Invoked when an executor sends a message. These messages are best
    /// effort; do not expect a framework message to be retransmitted in any
    /// reliable fashion.
    fn framework_message(
        &self,
        driver: &SchedulerDriver,
        executor_id: &proto::ExecutorID,
        slave_id: &proto::SlaveID,
        data: &String) -> ();

    /// Invoked when there is an unrecoverable error in the scheduler or
    /// driver. The driver will be aborted BEFORE invoking this callback.
    fn error(
        &self,
        driver: &SchedulerDriver,
        message: &String) -> ();
}

/// Abstract interface for connecting a scheduler to Mesos. This interface is
/// used both to manage the scheduler's lifecycle (start it, stop it, or wait
/// for it to finish) and to interact with Mesos (e.g., launch tasks, kill
/// tasks, etc.).
pub trait SchedulerDriver {

    /// Starts and immediately joins (i.e., blocks on) the driver.
    fn run(&mut self) -> i32;

    /// Stops the scheduler driver. If the 'failover' flag is set to false
    /// then it is expected that this framework will never reconnect to Mesos.
    /// So Mesos will unregister the framework and shutdown all its tasks and
    /// executors. If 'failover' is true, all executors and tasks will remain
    /// running (for some framework specific failover timeout) allowing the
    /// scheduler to reconnect (possibly in the same process, or from a
    /// different process, for example, on a different machine).
    fn stop(
        &self,
        failover: bool) -> i32;

    /// Requests resources from Mesos (see mesos.proto for a description of
    /// Request and how, for example, to request resources from specific
    /// slaves). Any resources available are offered to the framework via
    /// `Scheduler::resource_offers` callback, asynchronously.
    fn request_resources(
        &self,
        requests: &Vec<&proto::Request>) -> i32;

    /// Declines an offer in its entirety and applies the specified filters on
    /// the resources (see mesos.proto for a description of Filters). Note
    /// that this can be done at any time, it is not necessary to do this
    /// within the `Scheduler::resource_offers` callback.
    fn decline_offer(
        &self,
        offer_id: &proto::OfferID,
        filters: &proto::Filters) -> i32;

    /// Launches the given set of tasks. Note that all offers must belong to
    /// the same slave. Any resources remaining (i.e., not used by the tasks
    /// or their executors) will be considered declined. The specified filters
    /// are applied on all unused resources (see mesos.proto for a description
    /// of Filters).
    ///
    /// Invoking this function with an empty collection of tasks declines
    /// offers in their entirety (see `decline_offer`).
    fn launch_tasks(
        &self,
        offer_id: &proto::OfferID,
        tasks: &Vec<&proto::TaskInfo>,
        filters: &proto::Filters) -> i32;

    /// Removes all filters, previously set by the framework (via
    /// `launch_tasks`). This enables the framework to receive offers from
    /// those filtered slaves.
    fn revive_offers(&self) -> i32;

    /// Kills the specified task. Note that attempting to kill a task is
    /// currently not reliable. If, for example, a scheduler fails over while
    /// it was attempting to kill a task it will need to retry in the future.
    /// Likewise, if unregistered / disconnected, the request will be dropped
    /// (these semantics may be changed in the future).
    fn kill_task(
        &self,
        task_id: &proto::TaskID) -> i32;

    /// Sends a message from the framework to one of its executors. These
    /// messages are best effort; do not expect a framework message to be
    /// retransmitted in any reliable fashion.
    fn send_framework_message(
        &self,
        executor_id: &proto::ExecutorID,
        slave_id: &proto::SlaveID,
        data: &Vec<u8>) -> i32;
}
